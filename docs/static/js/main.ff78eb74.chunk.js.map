{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAoCeA,EAjCY,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAI,gBAERN,EAAWO,OAAOC,OAAS,IAC3BV,GAAc,SAAAW,GAAI,OAAKT,GAAL,mBAAoBS,OACtCR,EAAc,MAKlB,SACI,uBACIS,KAAO,OACPC,MAAUX,EACVY,SAnBc,SAACT,GACvBF,EAAeE,EAAEU,OAAOF,a,QCNnBG,EAAc,SAAC,GAAsB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAElC,OADAX,QAAQC,IAAK,CAAES,QAAOC,QAElB,sBAAKC,UAAU,yCAAf,UACI,qBACIC,IAAMF,EACNG,IAAMJ,IAEV,kCAAKA,EAAL,W,uBCVCK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAUF,GAD9C,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QATvB,kBAcZY,GAdY,4CAAH,sDCMPM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECHb,SAAEA,GAAe,IAAD,EACdtB,mBAAS,CAC/B4B,KAAM,GACNQ,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAkBxC,OAZAC,qBAAU,WAENlB,EAAQC,GACHkB,MAAM,SAAAC,GACHH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAItB,CAACd,IAEGe,EDIwBK,CAAcpB,GAAjCW,EAnByB,EAmB9BL,KAAaQ,EAnBiB,EAmBjBA,QASpB,OACI,qCACI,mCAAMd,EAAN,OACA,oBAAIJ,UAAU,UAGVkB,GAAW,mBAAGlB,UAAU,mCAAb,qBAGf,qBAAKA,UAAU,WAAf,SAEQe,EAAOH,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADGA,EAAIC,aEWzBW,EAtDM,WAAM,MAGa3C,mBAAS,CAAC,iBAHvB,mBAGhB4C,EAHgB,KAGJ7C,EAHI,KAevB,OAiBI,cAhBA,CAgBA,sBACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ6C,EAAWd,KAAK,SAAAR,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCtCjCuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ff78eb74.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log('Submit hecho');\r\n\r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories(cats => [inputValue, ...cats ]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type = \"text\"\r\n                value = { inputValue }\r\n                onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n    console.log( { title, url } );\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img \r\n                src={ url } \r\n                alt={ title } \r\n            />\r\n            <p> {title} </p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&api_key=R2gQaS4xApgaa5L4TfYnDJWtlv4Q4U76&limit=10`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n\r\n        }\r\n    });\r\n    // console.log(gifs);\r\n    return gifs;\r\n}","// import React, { useState, useEffect } from 'react'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // const [count, setCount] = useState(0);\r\n    // const [images, setImages] = useState([]);\r\n\r\n\r\n    // SE EJECUTA CUANDO ALGÚN ITEM DE LA LISTA DE DEPENDENCIAS CAMBIA\r\n    // SI LA LISTA DE DEPENDENCIAS ESTÁ VACIO, SE PUEDE DEJAR [] Y SE EJECUTARÁ SOLO UNA VEZ EL USE EFFECT\r\n    // useEffect( () => {\r\n        // getGifs( category )\r\n            // .then( images => {\r\n                // setImages(images);\r\n            // })\r\n            // .catch( error => {\r\n                // console.log( error );\r\n            // });\r\n    // }, [ category ]);\r\n\r\n    //USO DEL HOOK PERSONALIZADO\r\n    const {data:images, loading} = useFetchGifs( category );\r\n    // console.log( images );\r\n\r\n    \r\n\r\n   // getGifs();\r\n   // <h3> {count} </h3>\r\n   // <button onClick={() => setCount(count + 1)}>Sumar contador</button>\r\n\r\n    return (\r\n        <>\r\n            <h3> {category} </h3>\r\n            <hr className=\"linea\"/>\r\n\r\n            {\r\n                loading && <p className=\"animate__animated animate__flash\">Loading</p>\r\n            }\r\n\r\n            <div className=\"cardGrid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key = { img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","import {useEffect, useState} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [category]);\r\n\r\n    return state; //  retorna un objeto ===> {data[], loading: true}\r\n}\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    // const categories = ['One Punch', 'Dragon Ball', 'The avengers'];\r\n\r\n    const [categories, setCategories] = useState(['The avengers']);\r\n\r\n    // const handleAdd = () => {\r\n        // const elementoNuevo = 'TENET';\r\n\r\n        // SIMPLEMENTE TOMA TODOS LOS VALORES ANTERIORES DEL ARREGLO YA DEFINIDO EN EL ESTADO ANTERIOR Y LE AGREGA UNO NUEVO.\r\n        // setCategories( [...categories, 'TENET'] );\r\n\r\n        // EL SET CATEGORIES PUEDE TENER UN CALLBACK RECIBIENDO COMO PARAMETRO EL ESTADO ANTERIOR Y RETORNANDO EL NUEVO VALOR.\r\n        // setCategories(cats => [...cats, 'TENET']);\r\n    // }\r\n\r\n    return (\r\n        // NO SE PUEDE USAR UN FOR YA QUE ESTE NO REGRESA NINGUN VALOR\r\n        // EN ESTOS CASOS SE NECESITA UNA SENTENCIA QUE PERMITA DEVOLVER UN VALOR AL EJECUTARSE.\r\n\r\n        // categories.map( (category, idx) )\r\n\r\n        // BOTON PARA AGREGARLE NUEVO ITEM AL ARRAY <button onClick={ handleAdd }>Agregar</button>\r\n\r\n        /**\r\n         * <ol>\r\n                { \r\n                    categories.map( category => {\r\n                        return <li key= {category} > {category} </li>\r\n                    })\r\n                }\r\n            </ol>\r\n         */\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories= {setCategories} />\r\n            <hr/>\r\n\r\n            <ol>\r\n                { \r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category} \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n            \r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}